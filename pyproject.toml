[build-system]
requires = ['setuptools', 'setuptools_scm[toml]']
build-backend = 'setuptools.build_meta'

[project]
name = "ogstools"
dynamic = ["version"]
description = "A collection of Python tools aimed at evolving into a modeling toolchain around OpenGeoSys."
authors = [{ name = 'OpenGeoSys Community', email = 'info@opengeosys.org' }]
license = { text = "BSD-3-Clause" }
keywords = ["opengeosys", "geoscience", "subsurface modeling", "hydrogeology", "numerical simulation", "finite element method", "groundwater flow", "geochemistry", "geotechnical engineering", "porous media", "contaminant transport", "mesh generation", "data visualization", "scientific computing", "open-source software"]
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "Intended Audience :: Science/Research",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Scientific/Engineering :: Physics",
  "Topic :: Scientific/Engineering :: Mathematics",
  "Topic :: Scientific/Engineering :: Visualization",
  "License :: OSI Approved :: BSD License",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3 :: Only",
  "Operating System :: OS Independent"
]
readme = "README.md"
requires-python = '>=3.10'
dependencies = [
  "gmsh>=4.12.0",
  "h5py>=3.8.0",
  "jupytext>=1.14.0",
  "matplotlib>=3.7.1",
  "meshio>=5.3.0",
  "pyvista[all]>=0.40.1",
  "numpy>=1.20.0,<2.1", # max limited by geopandas (required by pandamesh)
  "scipy>=1.10.1",
  "Pint>=0.22",
  "papermill>=2.4.0",
  "pandamesh>=0.2.1", # meshing algorithm changed with this version
  "ogs>=6.5.3",
  "typeguard>=4.0.0",
  "lxml>=4.6.0"
]

[project.urls]
"Documentation" = 'https://ogs.ogs.xyz/tools/ogstools'
"Bug Tracker" = 'https://discourse.opengeosys.org'
"Source Code" = 'https://gitlab.opengeosys.org/ogs/tools/ogstools'

[tool.setuptools.packages.find]
where = ["."]
include = ["ogstools*"]
namespaces = false

[tool.setuptools_scm]
version_scheme = "no-guess-dev"         # would increment version otherwise
fallback_version = "0.1.0.post0+no-scm" # Manually increment on release!

[project.scripts]
msh2vtu = 'ogstools.msh2vtu._cli:cli'
feflow2ogs = 'ogstools.feflowlib._cli:cli'
shp2msh = 'ogstools.meshlib.shp2msh_cli:cli'

[project.optional-dependencies]
dev = ["pre-commit>=2.20", "build", "black"]
test = ["pytest", "coverage", "parameterized"]
docs = [
  "sphinx",
  "sphinx-argparse >=0.2.5, <0.5.0",
  "sphinxcontrib-programoutput",
  "sphinxcontrib-apidoc",
  "sphinxcontrib-mermaid",
  "livereload",
  "pydata-sphinx-theme",
  "myst-parser",
  "myst_nb",
  "sphinx-design",
  "sphinx_gallery",
  "trame-vtk>=2.6.0",
]
feflow = [
  "ifm_contrib>=0.2.3",
]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
  "-ra",
  "--showlocals",
  "--strict-markers",
  "--strict-config",
  "--import-mode=importlib",
]
xfail_strict = true
# TODO: LB enable this again, deal with MatplotlibDeprecationWarning in fe2vtu
# tests
#filterwarnings = ["error"]
log_cli_level = "info"
testpaths = ["tests"]

[tool.black]
line-length = 80
exclude = '.*/examples/.*'

[tool.mypy]
files = "ogstools/**/*.py"
# does not work when mypy invoked directly, works in pre-commit as explicitly
# stated there again:
exclude = ['.*/examples/.*']
ignore_missing_imports = true
scripts_are_modules = true
# Set to true when current issues are fixed
strict = false
# Delete following lines when strict is true:
check_untyped_defs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
warn_unreachable = true
enable_incomplete_feature = ["Unpack"]

[tool.ruff]
target-version = "py310"
exclude = ["EXPERIMENTAL"]
line-length = 80

[tool.ruff.lint]
select = [
  "E",
  "F",
  "W",    # flake8
  "B",
  "B904", # flake8-bugbear
  "I",    # isort
  "ARG",  # flake8-unused-arguments
  "C4",   # flake8-comprehensions
  "EM",   # flake8-errmsg
  "ICN",  # flake8-import-conventions
  "ISC",  # flake8-implicit-str-concat
  "G",    # flake8-logging-format
  "PGH",  # pygrep-hooks
  "PIE",  # flake8-pie
  "PL",   # pylint
  "PT",   # flake8-pytest-style
  "PTH",  # flake8-use-pathlib
  "RET",  # flake8-return
  "RUF",  # Ruff-specific
  "SIM",  # flake8-simplify
  "UP",   # pyupgrade
  "YTT",  # flake8-2020
  "EXE",  # flake8-executable
  "NPY",  # NumPy specific rules
  "PD",   # pandas-vet
]
extend-ignore = [
  "PLR",   # Design related pylint codes
  "E501",  # Line too long
  "PT004", # Use underscore for non-returning fixture (use usefixture instead)
  # RUF005 should be disabled when using numpy, see
  # https://github.com/charliermarsh/ruff/issues/2142:
  "RUF005",
  "PT009",  # can use unittest-assertion
]
typing-modules = ["mypackage._compat.typing"]
unfixable = [
  "T20",  # Removes print statements
  "F841", # Removes unused variables
]
flake8-unused-arguments.ignore-variadic-names = true

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["T20"]
"docs/examples/**" = ["B018"]

[tool.codespell]
ignore-words-list = "methode,ot"
skip = "*.vtu"
