stages:
  - test
  - maintenance
  - prepare
  - deploy

variables:
  POETRY_CACHE_DIR: "$CI_PROJECT_DIR/.cache"
  DOCKER_IMAGE: registry.opengeosys.org/ogs/tools/ogstools/devcontainer-3.10
  DOCKER_USER_IMAGE: registry.opengeosys.org/ogs/tools/ogstools/main-3.10
  ARTIFACTS_PAGES_URL: https://$CI_PROJECT_ROOT_NAMESPACE.$CI_PAGES_DOMAIN/-/$SUBGROUP_SLUG$CI_PROJECT_NAME/-/jobs/$CI_JOB_ID/artifacts

workflow:
  rules:
    - if: $CI_MERGE_REQUEST_IID
      changes:
        - .devcontainer/*
      variables:
        DOCKER_IMAGE: $CI_REGISTRY_IMAGE/devcontainer-3.10:$CI_COMMIT_REF_SLUG
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_TAG
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_PROJECT_PATH == "ogs/tools/ogstools"'

image: $DOCKER_IMAGE

cache:
  paths:
    - .cache

.pip-setup-extra-headless: &pip-setup-extra-headless
  - pip install --extra-index-url https://wheels.vtk.org --upgrade --force-reinstall vtk-osmesa
  - pip install -i https://gmsh.info/python-packages-dev-nox --upgrade --force-reinstall gmsh

.pip-setup-activate: &pip-setup-activate
  - python -m venv .venv --upgrade-deps
  - source .venv/bin/activate

.conda-setup-activate: &conda-setup-activate
  - conda --version
  - export CONDA_ENV_NAME=ogstools_conda_${PYTHON_VERSION}
  - conda create -y -n $CONDA_ENV_NAME python=${PYTHON_VERSION} -c conda-forge
  - conda activate $CONDA_ENV_NAME

.pip-install-ogs-latest: &pip-install-ogs-latest
#  - pip uninstall ogs -y
  - pip install ogs --index-url https://gitlab.opengeosys.org/api/v4/projects/120/packages/pypi/simple --pre

.regression-rules: &regression-rules
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"

.maintenance-rules: &maintenance-rules
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    when: manual
    allow_failure: true
  - if: $CI_PIPELINE_SOURCE == "schedule"


pre-commit:
  tags: [shell, envinf]
  rules:
    - if: $CI_MERGE_REQUEST_IID
  needs: []
  script:
    - git fetch origin ${CI_MERGE_REQUEST_DIFF_BASE_SHA}
    - pre-commit run --from-ref ${CI_MERGE_REQUEST_DIFF_BASE_SHA} --to-ref HEAD

build:
  script:
    - pip install build
    - pyproject-build

tests (arch - conda) [R]:
  stage: test
  tags: [shell, envinf]
  needs: []
  before_script:
    - *conda-setup-activate
    - pip install -e ".[pinned,test]"
    - *pip-setup-extra-headless
  script:
    - pytest
  parallel:
    matrix:
      - PYTHON_VERSION: "3.10"
      - PYTHON_VERSION: "3.11"
      - PYTHON_VERSION: "3.12"
      - PYTHON_VERSION: "3.13"
  rules:
    - if: '$PYTHON_VERSION == "3.13"'
      allow_failure: true
    - if: '$PYTHON_VERSION'
      allow_failure: false


tests (arch - pip - ogs custom latest) [M]:
  stage: maintenance
  tags: [shell, envinf]
  rules:
    - *maintenance-rules
  needs: []
  before_script:
    - *pip-setup-activate
    - *pip-install-ogs-latest
    - pip install -e .[test]
    - *pip-setup-extra-headless
  script:
    - pytest

tests (arch - conda - ogs custom latest) [M]:
  stage: maintenance
  tags: [shell, envinf]
  rules:
    - *maintenance-rules
  needs: []
  before_script:
    - *conda-setup-activate
    - *pip-install-ogs-latest
    - pip install -e .[test]
    - *pip-setup-extra-headless
  script:
    - pytest
  parallel:
    matrix:
      - PYTHON_VERSION: "3.11"
      - PYTHON_VERSION: "3.12"
      - PYTHON_VERSION: "3.13"



tests coverage (arch - container) [R]:
  stage: test
  script:
    - make setup_devcontainer
    - source .venv-devcontainer/bin/activate
    - make coverage
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    when: always
    paths:
      - htmlcov
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  environment:
    name: code coverage $CI_MERGE_REQUEST_IID
    url: ${ARTIFACTS_PAGES_URL}/htmlcov/index.html

tests (win - pip) [R]:
  stage: test
  tags: [windows]
  rules:
    - *regression-rules
  needs: []
  variables:
    MPLBACKEND: Agg  # non-interactive backend for matplotlib
  before_script:
    - python -m venv .venv
    - .venv\Scripts\Activate.ps1
    - pip install -e ".[pinned,test]"
  script:
    - pytest

# Remove -j 1 when this is resolved:
# https://github.com/pydata/pydata-sphinx-theme/issues/1643
.docs-script: &docs-script
  - make setup_devcontainer
  - source .venv-devcontainer/bin/activate
  - make docs SPHINXOPTS="-W --keep-going -n -j 4"
  - mv docs/_build/html public

docs preview [R]:
  stage: test
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  script:
    - *docs-script
  artifacts:
    paths:
      - public
  environment:
    name: docs preview $CI_MERGE_REQUEST_IID $CI_PROJECT_ROOT_NAMESPACE
    url: "${ARTIFACTS_PAGES_URL}/public/index.html"

docs preview [M]:
  stage: maintenance
  needs: []
  tags: [shell, envinf]
  rules:
    - *maintenance-rules
  before_script:
    - *pip-setup-activate
    - *pip-install-ogs-latest
    - pip install -e .[docs]
    - *pip-setup-extra-headless
  script:
    - make docs SPHINXOPTS="--keep-going -n -j 4" | tee sphinx_output.log
    - echo "Counting warnings in Sphinx output..."
    # Count lines with "WARNING" in the Sphinx log
    - warning_count=$(grep -c "WARNING" sphinx_output.log || true)
    - echo "Found $warning_count warnings in Sphinx documentation."
    # Set the warning threshold
    - warning_threshold=7
    # Check if warnings exceed the threshold
    - if [ "$warning_count" -lt "$warning_threshold" ]; then
        echo "Warnings ($warning_count) are below the threshold ($warning_threshold). Pipeline is green.";
        exit 0;
      else
        echo "Warnings ($warning_count) exceeded the threshold ($warning_threshold). Pipeline failed.";
        exit 1;
      fi
    - mv docs/_bpublicuild/html
  artifacts:
    paths:
      - public
  environment:
    name: docs preview $CI_COMMIT_REF_SLUG
    url: "${ARTIFACTS_PAGES_URL}/public/index.html"

setup maintainer [M]:
  stage: maintenance
  needs: []
  tags: [shell, envinf]
  rules:
    - *maintenance-rules
  before_script:
    - *pip-setup-activate
    - *pip-install-ogs-latest
  script:
    - pip install -e .[dev,test,docs,feflow]
    - *pip-setup-extra-headless

setup developer [R]:
  stage: test
  tags: [shell, envinf]
  rules:
    - *regression-rules
  before_script:
    - *pip-setup-activate
    - *pip-install-ogs-latest
  script:
    - pip install -e .[pinned,dev,test,docs,feflow]
    - *pip-setup-extra-headless

pages:
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  image: registry.opengeosys.org/ogs/tools/feflow-python-docker:8.0.1
  script:
    - *docs-script
  artifacts:
    paths:
      - public
  environment: production

pages-tag:
  stage: prepare
  rules:
    - if: $CI_COMMIT_TAG
  image: registry.opengeosys.org/ogs/tools/feflow-python-docker:8.0.1
  script:
    - *docs-script
  artifacts:
    paths:
      - public

deploy-pages-tag:
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG
  needs: [pages-tag]
  variables:
    GIT_STRATEGY: none
  script:
    - rm -rf ogstools-docs
    - git config --global user.name "GitLab CI"
    - git config --global user.email "gitlab-ci-no-reply@opengeosys.org"
    - git clone https://${CI_SERVER_HOST}/ogs/tools/ogstools-docs.git
    - cd ogstools-docs
    - mv ../public $CI_COMMIT_TAG
    - git add $CI_COMMIT_TAG
    - >
      jq 'map(if has("preferred") then del(.preferred) else . end) + [{"version": env.PARENT_PIPELINE_TAG,"url": "https://ogstools.opengeosys.org/\($ENV.PARENT_PIPELINE_TAG)/","preferred": true}]' _static/versions.json > versions.tmp
    - mv versions.tmp _static/versions.json
    - git add _static/versions.json
    - rm stable && ln -s $CI_COMMIT_TAG stable && git add stable
    - git commit -m "Release $CI_COMMIT_TAG"
    - git push "https://${CI_COMMITTER_USER_AND_TOKEN}@${CI_SERVER_HOST}/ogs/tools/ogstools-docs.git" HEAD:main

publish:
  rules:
    - if: $CI_COMMIT_TAG
      when: manual
  variables:
    TWINE_REPOSITORY: pypi
    PYTHON_KEYRING_BACKEND: keyring.backends.null.Keyring
  script:
    - pip install build twine
    - pyproject-build
    - twine upload dist/*

devcontainer image:
  stage: .pre
  tags:
    - envinf
    - shell
  rules:
    - changes:
        - .devcontainer/*
    # - when: manual # uncomment if required, otherwise jobs are skipped
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - devcontainer build --workspace-folder . --push true --image-name ${DOCKER_IMAGE}

user container image:
  stage: .pre
  needs: []
  tags:
    - envinf
    - shell
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      allow_failure: true
    - if: $CI_COMMIT_TAG
      variables:
        DOCKER_USER_IMAGE: registry.opengeosys.org/ogs/tools/ogstools/main-3.10:$CI_COMMIT_TAG
      allow_failure: true
    - when: manual
      allow_failure: true
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $DOCKER_USER_IMAGE .
    - docker push $DOCKER_USER_IMAGE

code_quality_ruff [R]:
  image: python:3.10-slim
  needs: []
  script:
    # Use same ruff as in .pre-commit-config.yaml
    - pip install ruff==0.0.277
    - ruff . --format gitlab > ruff-code-quality-report.json || true
  artifacts:
    reports:
      codequality: ruff-code-quality-report.json

code_quality_mypy [R]:
  image: python:3.10-slim
  needs: []
  script:
    # Use same mypy as in .pre-commit-config.yaml
    - pip install mypy==1.4.1 mypy-to-codeclimate
    - mypy ogstools > mypy-output.txt || true
    - mypy-to-codeclimate mypy-output.txt mypy-code-quality-report.json || true
  artifacts:
    reports:
      codequality: mypy-code-quality-report.json



ogs/tools/feflow-converter-tests:
  stage: test
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  trigger: ogs/tools/feflow-converter-tests
